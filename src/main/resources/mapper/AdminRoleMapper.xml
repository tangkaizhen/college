<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hanhe.college.dao.AdminRoleMapper" >
  <resultMap id="BaseResultMap" type="com.hanhe.college.entity.AdminRole" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="admin_id" property="adminId" jdbcType="BIGINT" />
    <result column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="operate_ip" property="operateIp" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, admin_id, role_id, operator, operate_time, operate_ip
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from college_admin_role
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from college_admin_role
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.hanhe.college.entity.AdminRole" >
    insert into college_admin_role (id, admin_id, role_id, 
      operator, operate_time, operate_ip
      )
    values (#{id,jdbcType=BIGINT}, #{adminId,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT}, 
      #{operator,jdbcType=VARCHAR}, #{operateTime,jdbcType=TIMESTAMP}, #{operateIp,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hanhe.college.entity.AdminRole" >
    insert into college_admin_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="adminId != null" >
        admin_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="operateTime != null" >
        operate_time,
      </if>
      <if test="operateIp != null" >
        operate_ip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="adminId != null" >
        #{adminId,jdbcType=BIGINT},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateIp != null" >
        #{operateIp,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hanhe.college.entity.AdminRole" >
    update college_admin_role
    <set >
      <if test="adminId != null" >
        admin_id = #{adminId,jdbcType=BIGINT},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        operate_time = #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateIp != null" >
        operate_ip = #{operateIp,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hanhe.college.entity.AdminRole" >
    update college_admin_role
    set admin_id = #{adminId,jdbcType=BIGINT},
      role_id = #{roleId,jdbcType=BIGINT},
      operator = #{operator,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      operate_ip = #{operateIp,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <delete id="deleteByAdminId" parameterType="long">
    DELETE FROM college_admin_role
    WHERE admin_id = #{adminId}
  </delete>
  <insert id="batchInsert" parameterType="map">
    insert into college_admin_role(admin_id, role_id, operator, operate_time, operate_ip)
    values
    <foreach collection="adminRoleList" item="adminRole" separator=",">
      (#{adminRole.adminId}, #{adminRole.roleId}, #{adminRole.operator}, #{adminRole.operateTime}, #{adminRole.operateIp})
    </foreach>
  </insert>
  <select id="getByAdminId" resultType="long">
    SELECT role_id
    FROM college_admin_role
    WHERE admin_id = #{adminId}
  </select>
  <resultMap id="adminRoleMap" type="com.hanhe.college.dto.AdminRoleDTO">
    <result column="admin_id" property="adminId" jdbcType="BIGINT" />
    <result column="role_names" property="roleNames" jdbcType="VARCHAR" />
  </resultMap>
  <select id="getRoleNamesByAdminIdList" resultMap="adminRoleMap">
    SELECT ar.admin_id, group_concat(r.name separator ',') AS role_names
    FROM college_admin_role ar
    JOIN college_role r ON (r.id = ar.role_id AND r.visible =1)
    WHERE ar.admin_id IN
    <foreach collection="adminIdList" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
    GROUP BY ar.admin_id
    ORDER BY ar.admin_id, ar.role_id
  </select>
</mapper>